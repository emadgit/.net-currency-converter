@page "/"
@rendermode InteractiveServer

@inject ILogger<Home> Logger

@inject OrderService OrderService
<PageTitle>Home</PageTitle>

<div class="container">

<h3>Select a country:</h3>
@if (countries != null && countries.Count > 0)
{
    <select class="form-select" @bind="SelectedCountry">
        @foreach (var country in countries)
        {
            <option value="@country">@country</option>
        }
    </select>
}
else
{
    <p>Loading countries...</p>
}
<h3>Average freight cost: @averageFreightInSelectedCurrency.ToString("F2") @selectedCurrency</h3>

<h3>Select a currency:</h3>
    <select class="form-select" @bind="SelectedCurrency">
        <option value="USD">$</option>
        <option value="EUR">€</option>
        <option value="GBP">£</option>
    </select>
</div>


<style>
.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

h3 {
    margin-top: 20px;
}

.form-select {
    width: 100%;
    height: 35px;
    margin-top: 10px;
    padding: 5px;
    border-radius: 5px;
    border: 1px solid #ccc;
}
</style>


@code {
    private List<string> countries = new List<string>();
    private decimal averageFreight;
    private decimal averageFreightInSelectedCurrency = 10;
    private string? selectedCountry = null;
    private string selectedCurrency = "USD";

    protected string SelectedCountry
    {
        get => selectedCountry ?? string.Empty;
        set
        {
            if (selectedCountry != value)
            {
                selectedCountry = value;
                FetchAndConvertFreight();
            }
        }
    }

    protected decimal AverageFreightInSelectedCurrency
    {
        get => averageFreightInSelectedCurrency;
        set
        {
            if (averageFreightInSelectedCurrency != value)
            {
                averageFreightInSelectedCurrency = value;
                FetchAndConvertFreight();
            }
        }
    }

    protected string SelectedCurrency
    {
        get => selectedCurrency;
        set
        {
            if (selectedCurrency != value)
            {
                selectedCurrency = value;
                FetchAndConvertFreight();
            }
        }
    }

protected override async Task OnInitializedAsync()
{
    countries = await OrderService.GetCountries();
    if (countries.Count > 0)
    {
        SelectedCountry = countries[0];
    }
}

private async void FetchAndConvertFreight()
{
    averageFreight = await OrderService.GetAverageFreight(SelectedCountry);
    averageFreightInSelectedCurrency = ConvertToSelectedCurrency(averageFreight);
}

    private decimal ConvertToSelectedCurrency(decimal amountInUSD)
    {
        // Replace these values with the actual exchange rates.
        const decimal usdToEur = 0.85m;
        const decimal usdToGbp = 0.75m;

        return SelectedCurrency switch
        {
            "EUR" => amountInUSD * usdToEur,
            "GBP" => amountInUSD * usdToGbp,
            _ => amountInUSD
        };
    }
}